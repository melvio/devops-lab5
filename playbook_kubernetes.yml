# playbook for assignment 6.1
# This playbook is compatible with Ansible version 2.9.6
- hosts: all
  become: true
  gather_facts: False
  tasks:
    - name: Bootstrap a host without python2 installed
      raw: test -e /usr/bin/python || (apt -y update && apt install -y python)

    - name: Update apt-cache
      apt:
        update_cache: yes  # equivalent to `apt-get update`

    - name: Install packages
      apt:
        pkg:
        - containerd
        - apt-transport-https


    - name: Add google cloud apt signing key
      ansible.builtin.apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present

    - name: Add kubernetes repository
      ansible.builtin.apt_repository:
        repo: deb http://apt.kubernetes.io/ kubernetes-xenial main # works like `apt-add-repository`

    - name: Install kubernetes packages
      apt:
        pkg:
          - kubelet
          - kubeadm
          - kubernetes-cni


- hosts: k8-master
  tasks:
    - name: Probe the br_netfilter kernel module
      become: yes
      shell: modprobe br_netfilter

    - name: Create a network bridge
      become: yes
      sysctl:
        name: net.bridge.bridge-nf-call-iptables
        value: '1'

    - name: Enable IP forwarding
      become: yes
      sysctl:
        name: net.ipv4.ip_forward
        value: '1'

    - name: Reset kubeadm (this allows us to run `kubeadm init` every time)
      become: yes
      shell: kubeadm reset --force

    - name: Create a .kube directory
      file:
        path: /home/ubuntu/.kube
        state: directory
        mode: '0755'

    - name: Initialize kubeadm
      become: yes
      # latest version of Ansible supports the `ansible.builtin.shell` key, the stable version needs the `shell` key
      shell: kubeadm init

    - name: Copy admin.conf
      become: yes
      copy:
        remote_src: true
        src: /etc/kubernetes/admin.conf
        dest: /home/ubuntu/.kube/config
        owner: "{{ ansible_ssh_user }}"
        group: "{{ ansible_ssh_user }}"
        mode: '0644'

    - name: Install the kubernetes Weave Net addon
      shell: kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"

    - name: Taint all nodes
      shell: kubectl taint nodes --all node-role.kubernetes.io/master-

    - name: Save kubeadm join command for following plays
      shell:
        cmd: kubeadm token create --print-join-command
      register: kubeadm_join

    - name: add kubeadm_join to host
      add_host:
        name: kubeadm_join_cmd
        varname: "{{ kubeadm_join.stdout }}"


- hosts: worker
  tasks:
    - name: Probe the br_netfilter kernel module
      become: yes
      shell: modprobe br_netfilter

    - name: Verify if variable was correctly captured
      debug:
        msg: "cmd is: {{ hostvars['kubeadm_join_cmd']['varname'] }}"

    - name: Reset kubeadm (this allows us to run `kubeadm init` every time)
      become: yes
      shell: kubeadm reset --force

    - name: Execute the join command
      become: yes
      shell: "{{ hostvars['kubeadm_join_cmd']['varname'] }}"


- hosts: k8-master
  tasks:
    - name: Execute kubectl get nodes and register the output
      shell:
        cmd: kubectl get nodes
      register: kubectl_get_nodes

    - name: Log the result of running kubectl get nodes
      debug:
        msg: " {{ kubectl_get_nodes.stdout }} "

    - name: Log the result of running kubectl get nodes (2)
      debug:
        verbosity: 1
        var: kubect_get_nodes






